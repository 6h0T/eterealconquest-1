// Script de prueba para el sistema de reenv√≠o de verificaci√≥n
// Uso: node scripts/test-resend-verification.js

const BASE_URL = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'

async function testResendVerification() {
  console.log('üß™ Iniciando pruebas del sistema de reenv√≠o de verificaci√≥n...\n')

  // Test 1: Reenv√≠o con email v√°lido (cuenta pendiente)
  console.log('üìß Test 1: Reenv√≠o con email v√°lido')
  try {
    const response = await fetch(`${BASE_URL}/api/resend-verification`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: 'test@example.com'
      })
    })

    const result = await response.json()
    console.log(`Status: ${response.status}`)
    console.log(`Respuesta:`, result)
    
    if (response.ok) {
      console.log('‚úÖ Test 1 PAS√ì: Email reenviado correctamente')
    } else {
      console.log('‚ÑπÔ∏è  Test 1: Error esperado (no hay cuenta pendiente)')
    }
  } catch (error) {
    console.log('‚ùå Test 1 FALL√ì:', error.message)
  }

  console.log('\n' + '='.repeat(50) + '\n')

  // Test 2: Reenv√≠o con email inv√°lido
  console.log('üìß Test 2: Reenv√≠o con email inv√°lido')
  try {
    const response = await fetch(`${BASE_URL}/api/resend-verification`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: 'email-invalido'
      })
    })

    const result = await response.json()
    console.log(`Status: ${response.status}`)
    console.log(`Respuesta:`, result)
    
    if (response.status === 400 && result.error.includes('inv√°lido')) {
      console.log('‚úÖ Test 2 PAS√ì: Email inv√°lido rechazado correctamente')
    } else {
      console.log('‚ùå Test 2 FALL√ì: Deber√≠a rechazar email inv√°lido')
    }
  } catch (error) {
    console.log('‚ùå Test 2 FALL√ì:', error.message)
  }

  console.log('\n' + '='.repeat(50) + '\n')

  // Test 3: Reenv√≠o sin email
  console.log('üìß Test 3: Reenv√≠o sin email')
  try {
    const response = await fetch(`${BASE_URL}/api/resend-verification`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({})
    })

    const result = await response.json()
    console.log(`Status: ${response.status}`)
    console.log(`Respuesta:`, result)
    
    if (response.status === 400) {
      console.log('‚úÖ Test 3 PAS√ì: Solicitud sin email rechazada correctamente')
    } else {
      console.log('‚ùå Test 3 FALL√ì: Deber√≠a rechazar solicitud sin email')
    }
  } catch (error) {
    console.log('‚ùå Test 3 FALL√ì:', error.message)
  }

  console.log('\n' + '='.repeat(50) + '\n')

  // Test 4: Cooldown (dos solicitudes r√°pidas)
  console.log('üìß Test 4: Verificar cooldown')
  const testEmail = 'cooldown@test.com'
  
  try {
    // Primera solicitud
    const response1 = await fetch(`${BASE_URL}/api/resend-verification`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: testEmail
      })
    })

    const result1 = await response1.json()
    console.log(`Primera solicitud - Status: ${response1.status}`)
    
    // Segunda solicitud inmediata
    const response2 = await fetch(`${BASE_URL}/api/resend-verification`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: testEmail
      })
    })

    const result2 = await response2.json()
    console.log(`Segunda solicitud - Status: ${response2.status}`)
    console.log(`Respuesta:`, result2)
    
    if (response2.status === 429 && result2.error.includes('esperar')) {
      console.log('‚úÖ Test 4 PAS√ì: Cooldown funcionando correctamente')
    } else {
      console.log('‚ÑπÔ∏è  Test 4: Cooldown no activado (puede ser normal si no hay cuenta pendiente)')
    }
  } catch (error) {
    console.log('‚ùå Test 4 FALL√ì:', error.message)
  }

  console.log('\n' + '='.repeat(50) + '\n')
  console.log('üèÅ Pruebas completadas')
  console.log('\nüìã Resumen de funcionalidades implementadas:')
  console.log('‚úÖ API de reenv√≠o de verificaci√≥n (/api/resend-verification)')
  console.log('‚úÖ P√°gina de reenv√≠o (/[lang]/reenviar-verificacion)')
  console.log('‚úÖ Enlace en formulario de registro')
  console.log('‚úÖ Enlace en p√°gina de verificaci√≥n (cuando falla)')
  console.log('‚úÖ Validaci√≥n de email')
  console.log('‚úÖ Sistema de cooldown (1 minuto)')
  console.log('‚úÖ Regeneraci√≥n de tokens expirados')
  console.log('‚úÖ Manejo de errores espec√≠ficos')
  console.log('‚úÖ Traducciones en espa√±ol e ingl√©s')
  
  console.log('\nüîó URLs disponibles:')
  console.log(`üìÑ P√°gina de reenv√≠o: ${BASE_URL}/es/reenviar-verificacion`)
  console.log(`üîå API de reenv√≠o: ${BASE_URL}/api/resend-verification`)
}

// Ejecutar pruebas
testResendVerification().catch(console.error)